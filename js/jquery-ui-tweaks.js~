angular.module("agrisDataApp", ['ngRoute','uiSwitch'])
        .config(['$routeProvider',
            function($routeProvider) {
                $routeProvider.when('/search',
                {
                    controller:'searchController',
                    templateUrl: 'templates/search.html'
                })
                .when('/search/:searchParam',
                {
                    controller:'searchController',
                    templateUrl: 'templates/search.html'
                })
                .when('/search/:searchParam/:pageParam',
                {
                    controller:'searchController',
                    templateUrl: 'templates/search.html'
                })
                .when('/item',
                {
                    controller:'itemController',
                    templateUrl: 'templates/item.html'
                })
                .when('/item/:itemId',
                {
                    controller:'itemController',
                    templateUrl: 'templates/item.html'
                })
                .when('/',
                {
                    redirectTo: '/search'
                });
            }
        ])
        .factory('agrisApiCallFactory', function($http) {
          var factory = {
            getSearchData: function (query, page, facets, limit, arnQuery, sortValues) {
            	
                if (!(Object.keys(facets).length === 0 && facets.constructor === Object)) {
                    facetParams = '';
                    for (facet in facets) {
                        i=0;
                        initialized = false;
                        for (value in facets[facet]) {
                            if (facets[facet][value]) {
                                if (!initialized) {
                                    facetParams += '&fq=('+facet+':\"'+Object.keys(facets[facet])[i]+'\"';
                                    initialized = true;
                                }
                                else {
                                    facetParams += ' OR \"'+Object.keys(facets[facet])[i]+'\"';
                                }
                                
                            }
                            i++;
                        }
                        facetParams += ')';
                    }
                }
                else {            
                    facetParams='';
                }
                if (sortValues) {
                	facetSort = '&facet.sort=index';
                }
                else {
                	facetSort = '&facet.count=index';
                }

                console.log("http://83.212.168.41:8080/solr-4.9.1/core1/select?q="+query+arnQuery+"&start="+page+"&wt=json&rows=10&facet=true&facet.limit="+limit+"&facet.field=date&facet.field=publicationDate&facet.field=center&facet.field=type"+facetParams+facetSort);
                
                //return $http.get("http://83.212.100.195:8080/agris-1.0/search?&freetext="+query+"&page="+page+"&apikey=agroknow&format=json"+facetParams+"&cache=true")
                return $http.get("http://83.212.168.41:8080/solr-4.9.1/core1/select?q="+query+arnQuery+"&start="+page+"&wt=json&rows=10&facet=true&facet.limit="+limit+"&facet.field=date&facet.field=publicationDate&facet.field=center&facet.field=type"+facetParams+facetSort)
                .then(function(response) {
                   var data = response.data;
                   return data;
                }, function(error) {
                    return 'error';
                });
            },
            getItemData: function (itemId) {

              return $http.get("http://83.212.100.195:8080/agris-1.0/resource/"+itemId+"?format=json&apikey=agroknow&cache=true")
                .then(function(response) {
                   var data = response.response.docs[0];
                   return data;
                }, function(error) {
                    return 'error';
                });
            }
          };
          return factory;
        })
        .factory('PagerService', function() {
            // service definition
            var service = {};

            service.GetPager = GetPager;

            return service;

            // service implementation
            function GetPager(totalItems, currentPage, pageSize) {
                // default to first page
                currentPage = currentPage || 1;

                // default page size is 10
                pageSize = pageSize || 10;

                // calculate total pages
                var totalPages = Math.ceil(totalItems / pageSize);

                var startPage, endPage;
                if (totalPages <= 10) {
                    // less than 10 total pages so show all
                    startPage = 1;
                    endPage = totalPages;
                } else {
                    // more than 10 total pages so calculate start and end pages
                    if (currentPage <= 6) {
                        startPage = 1;
                        endPage = 10;
                    } else if (currentPage + 4 >= totalPages) {
                        startPage = totalPages - 9;
                        endPage = totalPages;
                    } else {
                        startPage = currentPage - 5;
                        endPage = currentPage + 4;
                    }
                }

                // calculate start and end item indexes
                var startIndex = (currentPage - 1) * pageSize;
                var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);

                // create an array of pages to ng-repeat in the pager control
                var pages = _.range(startPage, endPage + 1);

                // return object with all pager properties required by the view
                return {
                    totalItems: totalItems,
                    currentPage: currentPage,
                    pageSize: pageSize,
                    totalPages: totalPages,
                    startPage: startPage,
                    endPage: endPage,
                    startIndex: startIndex,
                    endIndex: endIndex,
                    pages: pages
                };
            }
        })
        .filter('facetRename', function() {
            return function(input) {
            	if (input == 'date') {
            		return 'Processing Year';
            	}
            	else {
            		if (input == 'publicationDate') {
            			return 'Publication Year';
            		}
            		else {
            			if (input == 'type') {
            				return 'Resource type';
	            		}
	            		else {
	            			return 'Source';
	            		}
            		}
            	}
            }
        })
        .filter('facetValueLookup', function() {
            return function(input,scope) {
            	if (input.indexOf('http://ring.ciard.net/node/') != -1) {
	            	for ( o in scope.ciardCenters) {
	            		if (input == scope.ciardCenters[o].URI) {
	            			return scope.ciardCenters[o].CENTERNAME;
	            		}

	            	}
            	}
            	return input;
            }
        })
        .filter('capitalize', function() {
            return function(input) {
              return (!!input) ? input.charAt(0).toUpperCase() + input.substr(1).toLowerCase() : '';
            }
        })
        .filter('cut', function () {
            return function (value, wordwise, max, tail) {
                if (!value) return '';

                max = parseInt(max, 10);
                if (!max) return value;
                if (value.length <= max) return value;

                value = value.substr(0, max);
                if (wordwise) {
                    var lastspace = value.lastIndexOf(' ');
                    if (lastspace != -1) {
                      //Also remove . and , so its gives a cleaner result.
                      if (value.charAt(lastspace-1) == '.' || value.charAt(lastspace-1) == ',') {
                        lastspace = lastspace - 1;
                      }
                      value = value.substr(0, lastspace);
                    }
                }
                return value + " ...";
            };
        })
        .filter('range', function() {
		  return function(input, min, max) {
		    min = parseInt(min); //Make string input int
		    max = parseInt(max);
		    for (var i=min; i<max; i++)
		      input.push(i);
		    return input;
		  };
		})
        .controller("searchController", function($scope,$location,$routeParams,agrisApiCallFactory,PagerService) {
            $scope.selectedFacets = {};
            $scope.facetLimit = 20;
            $scope.arnQuery = '';
            
            $scope.populateDates = function() {
            	min = 1880; 
				max = parseInt( new Date().getFullYear());
				$scope.fromYearOptions = [];
				$scope.toYearOptions = [];
            	for (var i=min; i<=max; i++) {
            		if(i >= parseInt($scope.yearFrom)) 
				      $scope.toYearOptions.push(i);
					$scope.fromYearOptions.push(i);
				}
				$scope.arnDateSelect();
            }

            $scope.arnDateSelect = function() {
            	if ($scope.yearFrom != undefined && $scope.yearTo != undefined && $scope.yearFrom <= $scope.yearTo) {
            		$scope.arnQuery = '+ARN:/[A-Z][A-Z](';
            		for (var i=parseInt($scope.yearFrom); i<=parseInt($scope.yearTo); i++) {
		      			$scope.arnQuery+=i;
		      			if (i != parseInt($scope.yearTo)) {
		      				$scope.arnQuery += '|';
		      			}
            		}
            		$scope.arnQuery += ').*/';
            		$location.search('submittedFrom', $scope.yearFrom);
                	$location.search('submittedTo', $scope.yearTo);
                	$scope.searchPerformed = true;
            	}	 
            }

            $scope.searchSubmit = function() {
                $scope.searchLoading = true;
                $scope.facetLoading = true;
                if ($routeParams.searchParam != undefined) {
                    if ($routeParams.searchParam == "*") {
                        $scope.query = '*';
                        $scope.token='*';
                    }
                    else {
                        if ($scope.query == $routeParams.searchParam) {
                            $scope.token=$routeParams.searchParam;
                        }

                        $scope.query=$routeParams.searchParam;
                    }
                    q = $scope.query;
                    $scope.searchPerformed = true;
                }
                else {
                    if ($scope.query == '') {
                        $scope.searchPerformed = false;
                        $scope.token='*';
                        q = '*';
                    }
                    else {
                        $scope.token=$scope.query;
                        q = $scope.query;
                        $scope.searchPerformed = true;
                    }
                }
                if ($routeParams.pageParam != undefined) {
                    $scope.currentPage = parseInt($routeParams.pageParam);
                }
                
                //re-populate Submission Date field values
                $scope.populateDates();

                //check if a date-range query has been submitted through the URL
            	if ($routeParams.submittedFrom!=undefined && $routeParams.submittedTo!=undefined) {
            		if ( q == '*' ) {
            			q = '';
            		}
            		$scope.yearFrom = $routeParams.submittedFrom;
            		$scope.yearTo = $routeParams.submittedTo;
            		$scope.arnDateSelect($routeParams.submittedFrom, $routeParams.submittedTo);
            	}

            	if ($routeParams.processedIn != undefined) {
                    inHistory = false;
                    for (i in $scope.selectedFacets["date"]) {
                        if (i == $routeParams.dates) {
                            inHistory = true;
                            if ($scope.selectedFacets["date"][i]) {
                                $scope.selectedFacets["date"] = JSON.parse('{ "'+$routeParams.processedIn+'": true }');
                            }
                            break;
                        }
                    }
                    if (!inHistory) {
                        $scope.selectedFacets["date"] = JSON.parse('{ "'+$routeParams.processedIn+'": true }');
                    }
                }

                if ($routeParams.publishedIn != undefined) {
                    inHistory = false;
                    for (i in $scope.selectedFacets["publicationDate"]) {
                        if (i == $routeParams.publishedIn) {
                            inHistory = true;
                            if ($scope.selectedFacets["publicationDate"][i]) {
                                $scope.selectedFacets["publicationDate"] = JSON.parse('{ "'+$routeParams.publishedIn+'": true }');
                            }
                            break;
                        }
                    }
                    if (!inHistory) {
                        $scope.selectedFacets["publicationDate"] = JSON.parse('{ "'+$routeParams.publishedIn+'": true }');
                    }
                }

                if ($routeParams.source != undefined) {
                    inHistory = false;
                    for (i in $scope.selectedFacets["center"]) {
                        if (i == $routeParams.source) {
                            inHistory = true;
                            if ($scope.selectedFacets["center"][i]) {
                                $scope.selectedFacets["center"] = JSON.parse('{ "'+$routeParams.source+'": true }');
                            }
                            break;
                        }
                    }
                    if (!inHistory) {
                        $scope.selectedFacets["center"] = JSON.parse('{ "'+$routeParams.source+'": true }');
                    }
                }


                if (!(Object.keys($scope.selectedFacets).length === 0 && $scope.selectedFacets.constructor === Object)) {
                    searchPerformed = true;
                    for (facet in $scope.selectedFacets) {
                        i=0;
                        initialized = false;
                        for (value in $scope.selectedFacets[facet]) {
                            if ($scope.selectedFacets[facet][value]) {

                                if (facet == "date") {
                                	$location.search("processedIn",Object.keys($scope.selectedFacets[facet])[i]);
                                }
                                else {
                                	if (facet == "publicationDate") {
                                		$location.search("publishedIn",Object.keys($scope.selectedFacets[facet])[i]);
                                	}
                                	else {
                                		$location.search("source",Object.keys($scope.selectedFacets[facet])[i]);
                                	}
                                }
                            }
                            i++;
                        }
                    }
                }


                agrisApiCallFactory.getSearchData(q,$scope.currentPage, $scope.selectedFacets, $scope.facetLimit, $scope.arnQuery, $scope.sortByValues).then(function(data) {
                   
                   if (data == 'error') {
                    //$scope.currentPage++;
                        //$routeParams.pageParam=$scope.currentPage;
                        
                        //$scope.error=true;     
                        //$scope.searchSubmit();
                   }
                   else {
                       $scope.items = data.response.docs;
                       $scope.total = data.response.numFound;
                       $scope.pages = Array(Math.ceil($scope.total/10));
                       $scope.fid = '';
                       $scope.currentFacetPage = 0;
                       $scope.pager = PagerService.GetPager($scope.items, $scope.currentPage);
                       $scope.searchLoading = false;
                       if (data.facet_counts.facet_fields.length !=0) {
                       		$scope.facetLoading = false;
                       }
                       else {

                       }
                       $scope.facetData = data.facet_counts.facet_fields;
                    }

                }, function(msg) {
                    alert(msg);
                });
                
                
            }
            

        })

        .controller("mainController", function($scope, agrisApiCallFactory, $http) {
            $scope.initParams = function() {
            	$scope.yearFrom="2013";
                $scope.currentPage='0';
                $scope.query = '';
                $http.get('data/ring-agris-data.xml')
                .success(function(data, status, headers, config) {
                	var x2js = new X2JS();
                	var jsonOutput = x2js.xml_str2json(data);
                	$scope.ciardCenters = jsonOutput.INPUT_CENTERS.GILWD_ADMIN_INPUTCENTER;
                })
                .error(function(data, status, headers, config) {
                	alert('fuck');
                });

            }
        })

        .controller("itemController", function($scope, $routeParams, agrisApiCallFactory) {
            agrisApiCallFactory.getItemData($routeParams.itemId).then(function(data) {
                       $scope.itemData = data.resource;
                       if ($scope.isNotUndefined(data.resource["dct:isPartOf"][0])) {
                            $scope.partOfDoi = data.resource["dct:isPartOf"][0].value;
                            if (data.resource["dct:isPartOf"][1]["bibo:Journal"]) {
                            $scope.partOf = data.resource["dct:isPartOf"][1]["bibo:Journal"]["dct:title"].value;
                            }
                            else {
                                if (data.resource["dct:isPartOf"][2]["bibo:Journal"]) {
                                    $scope.partOf = data.resource["dct:isPartOf"][2]["bibo:Journal"]["dct:title"].value;
                                }
                            }
                       }
                       else {
                            $scope.partOf = data.resource["dct:isPartOf"]["bibo:Journal"]["dct:title"].value;
                       }
                    }, function(msg) {
                        alert (msg);
                    });

            $scope.isNotUndefined = function(itemField){
                return ( itemField !== undefined );
            }

            
        })